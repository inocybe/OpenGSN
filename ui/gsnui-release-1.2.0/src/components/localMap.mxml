//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Copyright 2009-2011 École de technologie supérieure, Communication Research Centre Canada, Inocybe Technologies Inc. and 6837247 CANADA Inc.
//
// 
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml">
	
	<maps:Map xmlns:maps="com.google.maps.*" id="googleMap" mapevent_mapready="onMapReady(event)" width="100%" height="100%" 
			  key="{this.parentApplication.googleMapKey}" horizontalCenter="0" verticalCenter="0"/> 
	
	<mx:Script> 
		<![CDATA[ 
			import com.google.maps.LatLng;
			import com.google.maps.Map;
			import com.google.maps.MapEvent;
			import com.google.maps.MapType;
			import com.google.maps.controls.ControlPosition;
			import com.google.maps.controls.MapTypeControl;
			import com.google.maps.controls.ZoomControl;
			import com.google.maps.controls.ZoomControlOptions;
			import com.google.maps.interfaces.IOverlay;
			import com.google.maps.overlays.Marker;
			import com.google.maps.overlays.MarkerOptions;
			import com.google.maps.services.ClientGeocoder;
			import com.google.maps.services.GeocodingEvent;
			import com.google.maps.styles.FillStyle;
			import com.google.maps.styles.StrokeStyle;
			
			import mx.collections.ArrayCollection; 
			
			//ETS Montreal: Latitude & Longitude : 45.495285,-73.562962
			//CRC Montreal: Latitude & Longitude : 45.345322,-75.880521
			
			//Default value = ETS Montreal
			public var latitude:Number = 45.495285;
			public var longitude:Number = -73.562962;
			public var zoomLevel:Number = 14;
			
			public var location:String;
			
			private var geocoder:ClientGeocoder;
			private var oldMarker:Marker = null;
			
			private var isMapReady:Boolean = false;
			
			private function onMapReady(event:Event):void {
				
				isMapReady = true;
				
				geocoder = new ClientGeocoder();
				geocoder.addEventListener( GeocodingEvent.GEOCODING_SUCCESS, onGeocodeSuccess);
				geocoder.addEventListener( GeocodingEvent.GEOCODING_FAILURE, onGeocodeFault );
				
				//Parameters: location, a zoom level, and the type of map
				googleMap.setCenter(new LatLng(latitude,longitude), zoomLevel, MapType.NORMAL_MAP_TYPE);
				
				//Add zoom control to the map
				var topRight:ControlPosition =  new ControlPosition(ControlPosition.ANCHOR_TOP_RIGHT, 5, 5); 
				var myZoomControl:ZoomControl = new ZoomControl(new ZoomControlOptions({position: topRight})); 
				googleMap.addControl(myZoomControl);
				if( location != null && location.length > 0){
					geocoder.geocode( location );
				}
			}
			
			//Update the Map marker after modifying it
			public function updateMap():void {
				if(isMapReady){
					//Parameters: location, a zoom level, and the type of map
					googleMap.setCenter(new LatLng(latitude,longitude), zoomLevel, MapType.NORMAL_MAP_TYPE);
					if(oldMarker != null){
						googleMap.removeOverlay( oldMarker as IOverlay );
					}
					
					if( location != null && location.length > 0){
						geocoder.geocode( location );
					}
				}
				
			} 
			
			private function onGeocodeSuccess( event:GeocodingEvent ) : void
			{
				var placemarks:Array = event.response.placemarks;
				if (placemarks.length > 0){
					var marker:Marker = new Marker( 
						placemarks[0].point, 
						new MarkerOptions ({ 
							strokeStyle: new StrokeStyle( {thickness: 1, alpha: 1, color: 0x000000} ), 
							fillStyle: new FillStyle({color: 0x0000ff, alpha: 0.8}), 
							radius: 12,
							hasShadow: true 
						})); 
					googleMap.addOverlay(marker);
					oldMarker = marker;
					
					googleMap.setCenter(marker.getLatLng(), zoomLevel, MapType.NORMAL_MAP_TYPE);
				}
			}
			
			private function onGeocodeFault( event : GeocodingEvent ) : void
			{
				trace(event);
				trace(event.status);
			}
			
		]]> 
	</mx:Script> 

</mx:Canvas>
