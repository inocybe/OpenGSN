//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Copyright 2009-2011 École de technologie supérieure, Communication Research Centre Canada, Inocybe Technologies Inc. and 6837247 CANADA Inc.
//
// 
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" styleName="popup" title="Migrate Panel">
	
	<mx:Style source="../style/gsn.css"/>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]
			private var listHost:ArrayCollection = new ArrayCollection();
			
			public var vm:String;
			public var vmEngineID:String;
			private var ipHost:String;
			private var idHost:String;
			private var oldState:String;
			
			//Init the list of Ip available in the combobox
			public function init():void{
				
				cloudManagerService.wsdl = this.parentApplication.cloudManagerWSDL;
				cloudManagerService.loadWSDL();
				
				var hostIp:String = this.parentApplication.vmComp.vmTable.selectedItem.hostIp;
				vmEngineID = this.parentApplication.vmComp.vmTable.selectedItem.resourceId;
				vm = this.parentApplication.vmComp.vmTable.selectedItem.name;
				listHost.removeAll();
				for(var i:int = 0 ; i< this.parentApplication.listHost.length; i++){
					if( this.parentApplication.listHost.getItemAt(i).ip != hostIp ){
						listHost.addItem( this.parentApplication.listHost.getItemAt(i) );
					}
				}
			}
			
			private function closePopUp(evt:MouseEvent):void {
				PopUpManager.removePopUp(this);
			}
			
			private function migrateVM(evt:MouseEvent):void {
				
				oldState = this.parentApplication.vmComp.vmTable.selectedItem.status;
				this.parentApplication.vmComp.vmTable.selectedItem.progressbarAlpha = 1;
				this.parentApplication.vmComp.vmTable.selectedItem.status = "MIGRATING";
				this.parentApplication.vmComp.vmTable.dataProvider = this.parentApplication.vmComp.listMachines;
				
				ipHost = comboHostIP.selectedItem.ip;
				idHost = comboHostIP.selectedItem.resourceId;
				
				cloudManagerService.migrateInstance(vmEngineID, vm, comboHostIP.selectedItem.resourceId);
				
				PopUpManager.removePopUp(this);
			
			}
			
			private function migrateListener(event:ResultEvent):void{
				
				try{
					var res:String = event.result as String;
					var vmName:String;
					if( res.split(" ")[0] == "VM:" && res.split(" ")[2] == "removed!"){
					
						vmName = res.split(" ")[1];
						this.parentApplication.vmComp.updateStatusVm(vmName, oldState);
						
						//Update the host ip and the host id for the vm
						//this.parentApplication.updateVm(vm,ipHost,idHost);
						this.parentApplication.updateVm(vmName,ipHost,idHost);
						
						//Update Dashboard Power Chart
						this.parentApplication.dashboardComp.updatePowerChart();
						
						//Update Dashboard Google markers
						this.parentApplication.dashboardComp.updateMap();
						
					}else if( res.split(" ")[0] == "VM:" && res.split(" ")[2] == "failed!"){
						vmName = res.split(" ")[1];
						this.parentApplication.vmComp.updateStatusVm(vmName, "FAILED");;
						Alert.show("The migration of the VM: "+vmName.split('_')[0]+" failed.");
					}else{
						Alert.show("An error occured during the virtual machine migration!");
					}
				}catch(e:Error){
					Alert.show("An error occured during the virtual machine migration!");
				}
			}
			
			
			private function faultHandler(event:FaultEvent):void{
				//Alert.show(event.fault.faultString + '\n' + event.fault.faultDetail);
			}
			
		]]>
	</mx:Script>
	
	<mx:WebService id="cloudManagerService" fault="faultHandler(event)" showBusyCursor="true">
		<mx:operation name="migrateInstance" result="migrateListener(event)" resultFormat="object"/>
	</mx:WebService>
	
	<mx:Form>
		<mx:FormHeading label="Choose a host where to migrate the VM"/>
		<mx:FormItem label="Host">
			<mx:ComboBox dataProvider="{listHost}" labelField="name" id="comboHostIP"/>
		</mx:FormItem>
		<mx:FormItem>
			<mx:HBox>
				<mx:Button label="Migrate" click="migrateVM(event)"/>
				<mx:Button label="Cancel" click="closePopUp(event)"/>
			</mx:HBox>
		</mx:FormItem>	
	</mx:Form>
	
</mx:Panel>

